#!/usr/bin/env bash

# Install docker with docker-compose optionally on Amazon Linux 2
# Copyright 2021 asonnleitner
# Usage:
# curl -sL https://raw.githubusercontent.com/asonnleitner/scripts/main/install-docker-amazon-linux -o $HOME/install-docker-amazon-linux && chmod +x $HOME/install-docker-amazon-linux && $HOME/install-docker-amazon-linux

# -e : exit immediately if a command exits with a non-zero status
# -u : treat unset variables as an error when substituting
# -o pipefail : pipe commands to fd 3 in case a command in a pipe fails
set -euo pipefail

# script directory
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"

# Stdout logging utility function
# Usage:
# logger <level> <message> <message>
function logger() {
  local levels=("success" "trace" "debug" "info" "warn" "error" "fatal")
  local level="$1"
  local message
  local pretty_message

  # If the first argument is a valid log level, use it. and shift the rest of the arguments
  # Otherwise, use the default log level (info) and pass the first argument as the message
  if [[ "${levels[*]}" =~ ${level} ]]; then
    shift
  else
    level="info"
  fi

  message="$*"

  # If the message is empty, don't print anything
  if [[ -z "${message}" ]]; then
    return
  fi

  pretty_message="$(date +"%Y-%m-%d %H:%M:%S") [${level^^}]: ${message}"

  case "$level" in
  success)
    echo -e "\e[92m$pretty_message\e[0m"
    ;;
  trace)
    echo -e "\e[97m$pretty_message\e[0m"
    ;;
  debug)
    echo -e "\e[96m$pretty_message\e[0m"
    ;;
  info)
    echo -e "\e[34m$pretty_message\e[0m"
    ;;
  warn)
    echo -e "\e[93m$pretty_message\e[0m"
    ;;
  error)
    echo -e "\e[91m$pretty_message\e[0m"
    ;;
  fatal)
    echo -e "\e[91m$pretty_message\e[0m"
    exit 1
    ;;
  *) ;;
  esac
}

# Check if user is root
if [[ "$(id -u)" != "0" ]]; then
  logger "fatal" "This script must be run as root"
  exit 1
fi

# Check if running on Amazon Linux 2
function valid_distribution() {
  local amazon_linux_id="amzn"
  local amazon_linux_version="2"
  local error_message="This script is for Amazon Linux 2 only"

  if [ -f /etc/os-release ]; then
    . /etc/os-release
    if [[ "${ID}" = "${amazon_linux_id}" ]] && [[ "${VERSION_ID}" = "${amazon_linux_version}" ]]; then
      logger "trace" "Running on Amazon Linux 2"
      return
    else
      logger "fatal" "${error_message}"
    fi
  else
    logger "fatal" "${error_message}"
  fi
}

function command_exists() {
  command -v "${1}" >/dev/null 2>&1
}

function is_service_active() {
  systemctl is-active "${1}"
}

function is_service_enabled() {
  systemctl is-enabled "${1}"
}

function update_system() {
  logger "info" "Updating system"
  yum update -y

  # check if amazon-linux-extras is installed
  if ! command_exists "amazon-linux-extras"; then
    logger "info" "Installing amazon-linux-extras"
    yum install -y amazon-linux-extras
  fi
}

function install_docker() {
  logger "info" "Installing docker"

  # install docker
  yum install -y docker

  # enable docker
  enable_docker

  # Check if user is in docker group
  if ! groups | grep -q "docker"; then
    logger "info" "Adding user ${USER} to docker group"
    usermod -aG docker "${USER}"
  fi
}

function enable_docker() {
  # check if docker service is_service_active and is_service_enabled
  if ! is_service_active "docker"; then
    logger "info" "Enabling docker service"
    systemctl enable docker --now
  fi
}

function prompt_start_docker() {
  logger "info" "Would you like to start docker?"
  while true; do
    read -rp "Start docker? [y/n]: " yn
    case $yn in
    [Yy]*)
      enable_docker
      break
      ;;
    [Nn]*)
      break
      ;;
    *)
      echo "Please answer yes or no."
      ;;
    esac
  done
}

function install_docker_compose() {
  logger "info" "Installing docker-compose"
  curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" \
    -o /usr/local/bin/docker-compose

  # Make docker-compose executable
  chmod +x /usr/local/bin/docker-compose
}

function prompt_install_docker_compose() {
  logger "info" "Would you like to install docker-compose?"
  while true; do
    read -rp "Install docker-compose? [y/n]: " yn
    case $yn in
    [Yy]*)
      install_docker_compose
      break
      ;;
    [Nn]*)
      break
      ;;
    *)
      echo "Please answer yes or no."
      ;;
    esac
  done
}

function main() {
  # Check if running on Amazon Linux 2
  valid_distribution

  # Updating system
  update_system

  # check if docker is installed
  if command_exists "docker"; then
    logger "trace" "Docker is already installed"

    #check if docker is running
    if is_service_active "docker"; then
      logger "trace" "Docker is already running"
    else
      logger "info" "Docker is not running"
      prompt_start_docker
    fi

    # check if docker-compose is installed
    if command_exists "docker-compose"; then
      logger "trace" "Docker-compose is already installed"
    else
      logger "info" "Docker-compose is not installed"
      prompt_install_docker_compose
    fi

    exit 0
  else
    logger "info" "Docker is not installed"
    install_docker
    # check if docker-compose is not installed
    if ! command_exists "docker-compose"; then
      prompt_install_docker_compose
    fi

    logger "info" "To apply changes, reboot is required"

    # Ask user if they want to reboot now
    logger "info" "Would you like to reboot now?"
    while true; do
      read -rp "Reboot now? [y/n]: " yn
      case $yn in
      [Yy]*)
        reboot
        break
        ;;
      [Nn]*)
        break
        ;;
      *)
        echo "Please answer yes or no."
        ;;
      esac
    done

    exit 0
  fi
}

main "$@"

# Delete itself
rm -- "$0"
